"""autogenerated by genpy from seagull_autopilot_msgs/AutopilotTelemetry.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import seagull_commons_msgs.msg
import std_msgs.msg

class AutopilotTelemetry(genpy.Message):
  _md5sum = "645d93bf5a3523d02fe4719dbe79be4b"
  _type = "seagull_autopilot_msgs/AutopilotTelemetry"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """seagull_commons_msgs/SeagullHeader header
float32 latitude
float32 longitude
float32 altitude
uint16 ias
int16 vx
int16 vy
int16 vz
int16 roll
int16 pitch
float32 yaw
int16 barometricAltitude
float32 windSouth
float32 windWest
uint16 leftRPM
uint16 rightRPM
uint16 staticPressure
int16 accelX
int16 accelY
int16 accelZ
uint16 compass
uint16 agl
uint64 timestamp #GMT posix timestamp converted from gps time 
float32 fuel
================================================================================
MSG: seagull_commons_msgs/SeagullHeader
Header header
uint16 vehicleId
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','latitude','longitude','altitude','ias','vx','vy','vz','roll','pitch','yaw','barometricAltitude','windSouth','windWest','leftRPM','rightRPM','staticPressure','accelX','accelY','accelZ','compass','agl','timestamp','fuel']
  _slot_types = ['seagull_commons_msgs/SeagullHeader','float32','float32','float32','uint16','int16','int16','int16','int16','int16','float32','int16','float32','float32','uint16','uint16','uint16','int16','int16','int16','uint16','uint16','uint64','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,latitude,longitude,altitude,ias,vx,vy,vz,roll,pitch,yaw,barometricAltitude,windSouth,windWest,leftRPM,rightRPM,staticPressure,accelX,accelY,accelZ,compass,agl,timestamp,fuel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AutopilotTelemetry, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = seagull_commons_msgs.msg.SeagullHeader()
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.ias is None:
        self.ias = 0
      if self.vx is None:
        self.vx = 0
      if self.vy is None:
        self.vy = 0
      if self.vz is None:
        self.vz = 0
      if self.roll is None:
        self.roll = 0
      if self.pitch is None:
        self.pitch = 0
      if self.yaw is None:
        self.yaw = 0.
      if self.barometricAltitude is None:
        self.barometricAltitude = 0
      if self.windSouth is None:
        self.windSouth = 0.
      if self.windWest is None:
        self.windWest = 0.
      if self.leftRPM is None:
        self.leftRPM = 0
      if self.rightRPM is None:
        self.rightRPM = 0
      if self.staticPressure is None:
        self.staticPressure = 0
      if self.accelX is None:
        self.accelX = 0
      if self.accelY is None:
        self.accelY = 0
      if self.accelZ is None:
        self.accelZ = 0
      if self.compass is None:
        self.compass = 0
      if self.agl is None:
        self.agl = 0
      if self.timestamp is None:
        self.timestamp = 0
      if self.fuel is None:
        self.fuel = 0.
    else:
      self.header = seagull_commons_msgs.msg.SeagullHeader()
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.ias = 0
      self.vx = 0
      self.vy = 0
      self.vz = 0
      self.roll = 0
      self.pitch = 0
      self.yaw = 0.
      self.barometricAltitude = 0
      self.windSouth = 0.
      self.windWest = 0.
      self.leftRPM = 0
      self.rightRPM = 0
      self.staticPressure = 0
      self.accelX = 0
      self.accelY = 0
      self.accelZ = 0
      self.compass = 0
      self.agl = 0
      self.timestamp = 0
      self.fuel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.header.seq, _x.header.header.stamp.secs, _x.header.header.stamp.nsecs))
      _x = self.header.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H3fH5hfh2f3H3h2HQf.pack(_x.header.vehicleId, _x.latitude, _x.longitude, _x.altitude, _x.ias, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.barometricAltitude, _x.windSouth, _x.windWest, _x.leftRPM, _x.rightRPM, _x.staticPressure, _x.accelX, _x.accelY, _x.accelZ, _x.compass, _x.agl, _x.timestamp, _x.fuel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = seagull_commons_msgs.msg.SeagullHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.header.seq, _x.header.header.stamp.secs, _x.header.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.header.vehicleId, _x.latitude, _x.longitude, _x.altitude, _x.ias, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.barometricAltitude, _x.windSouth, _x.windWest, _x.leftRPM, _x.rightRPM, _x.staticPressure, _x.accelX, _x.accelY, _x.accelZ, _x.compass, _x.agl, _x.timestamp, _x.fuel,) = _struct_H3fH5hfh2f3H3h2HQf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.header.seq, _x.header.header.stamp.secs, _x.header.header.stamp.nsecs))
      _x = self.header.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H3fH5hfh2f3H3h2HQf.pack(_x.header.vehicleId, _x.latitude, _x.longitude, _x.altitude, _x.ias, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.barometricAltitude, _x.windSouth, _x.windWest, _x.leftRPM, _x.rightRPM, _x.staticPressure, _x.accelX, _x.accelY, _x.accelZ, _x.compass, _x.agl, _x.timestamp, _x.fuel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = seagull_commons_msgs.msg.SeagullHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.header.seq, _x.header.header.stamp.secs, _x.header.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.header.vehicleId, _x.latitude, _x.longitude, _x.altitude, _x.ias, _x.vx, _x.vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.barometricAltitude, _x.windSouth, _x.windWest, _x.leftRPM, _x.rightRPM, _x.staticPressure, _x.accelX, _x.accelY, _x.accelZ, _x.compass, _x.agl, _x.timestamp, _x.fuel,) = _struct_H3fH5hfh2f3H3h2HQf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H3fH5hfh2f3H3h2HQf = struct.Struct("<H3fH5hfh2f3H3h2HQf")
_struct_3I = struct.Struct("<3I")

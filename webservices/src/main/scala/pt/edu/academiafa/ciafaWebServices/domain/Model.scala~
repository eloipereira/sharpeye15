package pt.edu.academiafa.ciafaWebServices.domain

/**
  * TelemetrySample entity.
  *
  * @param id telemetry id
  * @param vId vehicle id
  * @param loc location parameters (lat, lon, alt)
  * @param ias indicated airspeed
  * @param gsN ground speed (north component)
  * @param gsE ground speed (east component)
  * @param gsD ground speed (down component)
  * @param roll roll angle
  * @param pitch pitch angle
  * @param yaw yaw angle
  * @param windS wind speed (South component)
  * @param windW wind speed (West component)
  * @param rpmL left engine RPM
  * @param rpmR right engine RPM
  * @param accelX acceleration (x-axis)
  * @param accelY acceleration (y-axis)
  * @param accelZ acceleration (z-axis)
  * @param compass heading
  * @param agl altitude AGL
  * @param timestamp GMT posix timestamp converted from gps time 
  */

case class TelemetrySample(
  id: Option[Long],
  timestamp: Long,
  vId: Int,
  loc: Location
  ias: Int,
  gsN: Int,
  gsE: Int,
  gsD: Int,
  roll: Int,
  pitch: Int,
  yaw: Float,
  windS: Float,
  windW: Float,
  rpmL: Int,
  rpmR: Int,
  accelX: Int,
  accelY: Int,
  accelZ: Int,
  compass: Int,
  agl: Int
)

/**
  * Waypoint Sample entity.
  * 
  * @param id waypoint sample id
  * @param index waypoint index
  * @param vId vehicle id
  * @param loc location parameters
  * @param orbit orbit parameters 
  * @param next next waypoint index
  * @param timestamp GMT posix timestamp converted from gps time 
  */

case class WaypointSample(
  id: Option[Long],
  timestamp: Long,
  index: Int,
  vId: Int,
  loc: Location,
  orbit: Orbit,
  next: Int
)

/**
  * Location entity.
  * 
  * @param lat latitude
  * @param lon longitude
  * @param alt altitude
  */

case class Location(
  lat: Float,
  lon: Float,
  alt: Float
)

/**
  * GroundSpeed entity.
  * 
  * @param north north component
  * @param east east component
  * @param down down component
  */

case class GroundSpeed(
  north: Int,
  east: Int,
  down: Int
)



/**
  * Orbit entity.
  * 
  * @param orbitRight orbit is clockwise?
  * @param orbitRadius orbit radius
  * @param orbitTime orbit time (0 if manually determined by operator)
  */

case class Orbit(
  orbitRight: Boolean,
  orbitRadius: Int,
  orbitTime: Int
)
